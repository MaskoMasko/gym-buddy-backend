datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            Int     @id @default(autoincrement())
    email         String  @unique
    name          String?
    emailVerified Boolean @default(false)
    password      String?
    accessToken   String?
    refreshToken  String?
    // I have no idea how this works...
    friends       User[]  @relation("Friends")
    userAsFriend  User[]  @relation("Friends")

    chatRooms  ChatRoom[] @relation("ChatRoomParticipants")
    messages   Message[]  @relation("Sender")
    ChatRoom   ChatRoom?  @relation(fields: [chatRoomId], references: [id])
    chatRoomId Int?
    Message    Message[]
    userId     Int?
}

// ChatRoom model
model ChatRoom {
    id           Int       @id @default(autoincrement())
    name         String
    participants User[]    @relation("ChatRoomParticipants")
    messages     Message[]
    User         User[]
}

// Message model
model Message {
    id        Int      @id @default(autoincrement())
    text      String
    createdAt DateTime @default(now())
    sender    User     @relation("Sender", fields: [senderId], references: [id])
    chatRoom  ChatRoom @relation(fields: [chatRoomId], references: [id])

    senderId   Int
    chatRoomId Int
    User       User? @relation(fields: [userId], references: [id])
    userId     Int?
}

//GymLocation
model GymLocation {
    id        Int     @id @default(autoincrement())
    name      String
    rating    Float
    latitude  Decimal
    longitude Decimal
}

model Category {
    id      Int       @id
    name    String
    image   String
    Workout Workout[]
}

model Equipment {
    id      Int       @id
    name    String
    Workout Workout[]
}

model Image {
    id                            Int       @id
    image                         String
    uuid                          String?
    exercise_base                 Int?
    exercise_base_uuid            Int?
    is_main                       Boolean?
    style                         String?
    license                       Int?
    license_title                 String?
    license_author                String?
    license_author_url            String?
    license_object_url            String?
    license_derivative_source_url String?
    author_history                String[]
    Workout                       Workout[]
}

model Video {
    id                            Int       @id
    video                         String
    uuid                          String?
    exercise_base                 Int?
    exercise_base_uuid            Int?
    is_main                       Boolean?
    size                          Int?
    duration                      String?
    width                         Int?
    height                        Int?
    codec                         String?
    codec_long                    String?
    license                       Int?
    license_title                 String?
    license_author                String?
    license_author_url            String?
    license_object_url            String?
    license_derivative_source_url String?
    author_history                String[]
    Workout                       Workout[]
}

model Workout {
    id               Int         @id
    name             String
    duration         Int?
    description      String?
    category         Category    @relation(fields: [categoryId], references: [id])
    categoryId       Int
    equipment        Equipment[]
    images           Image[]
    videos           Video[]
    uuid             String      @unique
    exercise_base_id Int
    creation_date    String
    // aliases          String[]
    // language          String?
    // license           String?
    // license_author    String?
    // variations        Int[]
    // comments          String?
    // author_history    String[]
    // muscles           String?
    // muscles_secondary String?
}
